-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_optimized is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_ap_vld : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir_optimized is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_optimized_fir_optimized,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.923000,HLS_SYN_LAT=7,HLS_SYN_TPT=3,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3637,HLS_SYN_LUT=3030,HLS_VERSION=2025_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFF0A : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111100001010";
    constant ap_const_lv32_FFFFFA50 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111101001010000";
    constant ap_const_lv32_FFFFFFAC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110101100";
    constant ap_const_lv32_FFFFFF8E : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110001110";
    constant ap_const_lv32_FFFFFAC3 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111101011000011";
    constant ap_const_lv32_FFFFFE3B : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111000111011";
    constant ap_const_lv32_FFFFFC78 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110001111000";
    constant ap_const_lv32_FFFFFED9 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111011011001";
    constant ap_const_lv32_FFFFFDC7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110111000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal p_ZZ13fir_optimizedPiiE9shift_reg_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_ZZ13fir_optimizedPiiE9shift_reg_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_optimized_int_int_shift_reg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_optimized_int_int_shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_optimized_int_int_shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_optimized_int_int_shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_optimized_int_int_shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_optimized_int_int_shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_optimized_int_int_shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_optimized_int_int_shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_optimized_int_int_shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_optimized_int_int_shift_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal fir_optimized_int_int_shift_reg_5_reg_1303 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ZZ13fir_optimizedPiiE9shift_reg_39_load_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal fir_optimized_int_int_shift_reg_10_reg_1315 : STD_LOGIC_VECTOR (31 downto 0);
    signal fir_optimized_int_int_shift_reg_20_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal fir_optimized_int_int_shift_reg_8_load_reg_1327 : STD_LOGIC_VECTOR (31 downto 0);
    signal fir_optimized_int_int_shift_reg_3_load_reg_1333 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_5_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_5_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_6_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_6_reg_1349 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_10_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_10_reg_1354 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_1_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_1_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_2_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_2_reg_1373 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_3_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_3_reg_1379 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_4_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_4_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_7_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_7_reg_1391 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_8_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_8_reg_1396 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_9_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_9_reg_1401 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_12_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_12_reg_1406 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_13_fu_550_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_13_reg_1414 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_4_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_4_reg_1422 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_48_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_48_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_50_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_50_reg_1432 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln48_reg_1437 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_5_fu_854_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_5_reg_1442 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_8_fu_870_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_8_reg_1447 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_53_fu_902_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_53_reg_1452 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_15_fu_913_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_15_reg_1457 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_17_fu_925_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_17_reg_1463 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_18_fu_931_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_18_reg_1469 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_19_fu_937_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_19_reg_1474 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_20_fu_943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_20_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_21_fu_949_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_21_reg_1485 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_22_fu_955_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_22_reg_1490 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_54_fu_978_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_54_reg_1496 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_16_fu_1002_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_16_reg_1501 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_2_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_2_reg_1506 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_52_fu_1105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_52_reg_1511 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_25_fu_1147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_25_reg_1516 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_33_fu_1153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_33_reg_1521 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_36_fu_1164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_36_reg_1526 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_41_fu_1174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_41_reg_1531 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_21_fu_1199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_21_reg_1536 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_26_fu_1209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_26_reg_1541 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_34_fu_1214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_34_reg_1546 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_42_fu_1231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_42_reg_1551 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_27_fu_1258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_27_reg_1556 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_30_fu_1268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_30_reg_1561 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_43_fu_1278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_43_reg_1566 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_31_fu_1288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_31_reg_1571 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_175_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_185_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln48_6_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_7_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_3_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_8_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_13_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_14_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_7_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_15_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_47_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_16_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_11_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_18_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_19_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_9_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_20_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_9_fu_839_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_46_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_10_fu_849_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_17_fu_860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_49_fu_865_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_24_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_25_fu_880_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_11_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_26_fu_891_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_12_fu_896_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_14_fu_907_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_27_fu_960_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_28_fu_966_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_13_fu_972_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_16_fu_919_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_31_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_32_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_15_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_fu_1008_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_1_fu_1013_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_fu_1018_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_2_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_1_fu_1029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_3_fu_1035_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_4_fu_1046_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_5_fu_1051_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_11_fu_1062_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_12_fu_1067_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_21_fu_1078_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_22_fu_1083_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_10_fu_1088_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_23_fu_1094_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_51_fu_1099_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_29_fu_1110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_30_fu_1115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_33_fu_1126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_34_fu_1131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_17_fu_1136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_24_fu_1142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_14_fu_1120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_45_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_35_fu_1158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_6_fu_1072_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_40_fu_1170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_37_fu_1183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_20_fu_1188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_38_fu_1194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_23_fu_1205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_44_fu_1179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_38_fu_1219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_39_fu_1225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_35_fu_1236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_18_fu_1241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln48_36_fu_1247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln48_19_fu_1252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_29_fu_1264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_37_fu_1274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_28_fu_1283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_32_fu_1293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_optimized_mul_32s_12s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_optimized_mul_32s_11s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_12s_32_2_1_U1 : component fir_optimized_mul_32s_12s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 12,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_175_p0,
        din1 => grp_fu_175_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    mul_32s_12s_32_2_1_U2 : component fir_optimized_mul_32s_12s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 12,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    mul_32s_11s_32_2_1_U3 : component fir_optimized_mul_32s_11s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_185_p0,
        din1 => grp_fu_185_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln48_10_reg_1354 <= add_ln48_10_fu_330_p2;
                add_ln48_25_reg_1516 <= add_ln48_25_fu_1147_p2;
                add_ln48_31_reg_1571 <= add_ln48_31_fu_1288_p2;
                add_ln48_33_reg_1521 <= add_ln48_33_fu_1153_p2;
                add_ln48_36_reg_1526 <= add_ln48_36_fu_1164_p2;
                add_ln48_41_reg_1531 <= add_ln48_41_fu_1174_p2;
                add_ln48_52_reg_1511 <= add_ln48_52_fu_1105_p2;
                add_ln48_5_reg_1344 <= add_ln48_5_fu_318_p2;
                add_ln48_6_reg_1349 <= add_ln48_6_fu_324_p2;
                add_ln48_reg_1339 <= add_ln48_fu_312_p2;
                fir_optimized_int_int_shift_reg_10_reg_1315 <= p_ZZ13fir_optimizedPiiE9shift_reg_33;
                fir_optimized_int_int_shift_reg_20_reg_1321 <= p_ZZ13fir_optimizedPiiE9shift_reg_13;
                fir_optimized_int_int_shift_reg_3_load_reg_1333 <= fir_optimized_int_int_shift_reg_3;
                fir_optimized_int_int_shift_reg_5_reg_1303 <= p_ZZ13fir_optimizedPiiE9shift_reg_43;
                fir_optimized_int_int_shift_reg_8_load_reg_1327 <= fir_optimized_int_int_shift_reg_8;
                p_ZZ13fir_optimizedPiiE9shift_reg_39_load_reg_1309 <= p_ZZ13fir_optimizedPiiE9shift_reg_39;
                sub_ln48_2_reg_1506 <= sub_ln48_2_fu_1040_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln48_12_reg_1406 <= add_ln48_12_fu_544_p2;
                add_ln48_13_reg_1414 <= add_ln48_13_fu_550_p2;
                add_ln48_1_reg_1364 <= add_ln48_1_fu_501_p2;
                add_ln48_26_reg_1541 <= add_ln48_26_fu_1209_p2;
                add_ln48_2_reg_1373 <= add_ln48_2_fu_506_p2;
                add_ln48_34_reg_1546 <= add_ln48_34_fu_1214_p2;
                add_ln48_3_reg_1379 <= add_ln48_3_fu_512_p2;
                add_ln48_42_reg_1551 <= add_ln48_42_fu_1231_p2;
                add_ln48_48_reg_1427 <= add_ln48_48_fu_618_p2;
                add_ln48_4_reg_1385 <= add_ln48_4_fu_518_p2;
                add_ln48_50_reg_1432 <= add_ln48_50_fu_648_p2;
                add_ln48_7_reg_1391 <= add_ln48_7_fu_523_p2;
                add_ln48_8_reg_1396 <= add_ln48_8_fu_528_p2;
                add_ln48_9_reg_1401 <= add_ln48_9_fu_534_p2;
                sub_ln48_21_reg_1536 <= sub_ln48_21_fu_1199_p2;
                sub_ln48_4_reg_1422 <= sub_ln48_4_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln48_15_reg_1457 <= add_ln48_15_fu_913_p2;
                add_ln48_17_reg_1463 <= add_ln48_17_fu_925_p2;
                add_ln48_18_reg_1469 <= add_ln48_18_fu_931_p2;
                add_ln48_19_reg_1474 <= add_ln48_19_fu_937_p2;
                add_ln48_20_reg_1480 <= add_ln48_20_fu_943_p2;
                add_ln48_21_reg_1485 <= add_ln48_21_fu_949_p2;
                add_ln48_22_reg_1490 <= add_ln48_22_fu_955_p2;
                add_ln48_27_reg_1556 <= add_ln48_27_fu_1258_p2;
                add_ln48_30_reg_1561 <= add_ln48_30_fu_1268_p2;
                add_ln48_43_reg_1566 <= add_ln48_43_fu_1278_p2;
                add_ln48_53_reg_1452 <= add_ln48_53_fu_902_p2;
                add_ln48_54_reg_1496 <= add_ln48_54_fu_978_p2;
                sub_ln48_16_reg_1501 <= sub_ln48_16_fu_1002_p2;
                sub_ln48_5_reg_1442 <= sub_ln48_5_fu_854_p2;
                sub_ln48_8_reg_1447 <= sub_ln48_8_fu_870_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                fir_optimized_int_int_shift_reg <= input_r;
                fir_optimized_int_int_shift_reg_1 <= fir_optimized_int_int_shift_reg;
                fir_optimized_int_int_shift_reg_2 <= fir_optimized_int_int_shift_reg_1;
                fir_optimized_int_int_shift_reg_4 <= fir_optimized_int_int_shift_reg_3_load_reg_1333;
                fir_optimized_int_int_shift_reg_5 <= fir_optimized_int_int_shift_reg_4;
                fir_optimized_int_int_shift_reg_6 <= fir_optimized_int_int_shift_reg_5;
                fir_optimized_int_int_shift_reg_9 <= fir_optimized_int_int_shift_reg_8_load_reg_1327;
                p_ZZ13fir_optimizedPiiE9shift_reg_10 <= fir_optimized_int_int_shift_reg_9;
                p_ZZ13fir_optimizedPiiE9shift_reg_11 <= p_ZZ13fir_optimizedPiiE9shift_reg_10;
                p_ZZ13fir_optimizedPiiE9shift_reg_12 <= p_ZZ13fir_optimizedPiiE9shift_reg_11;
                p_ZZ13fir_optimizedPiiE9shift_reg_34 <= fir_optimized_int_int_shift_reg_10_reg_1315;
                p_ZZ13fir_optimizedPiiE9shift_reg_35 <= p_ZZ13fir_optimizedPiiE9shift_reg_34;
                p_ZZ13fir_optimizedPiiE9shift_reg_36 <= p_ZZ13fir_optimizedPiiE9shift_reg_35;
                p_ZZ13fir_optimizedPiiE9shift_reg_37 <= p_ZZ13fir_optimizedPiiE9shift_reg_36;
                p_ZZ13fir_optimizedPiiE9shift_reg_40 <= p_ZZ13fir_optimizedPiiE9shift_reg_39_load_reg_1309;
                p_ZZ13fir_optimizedPiiE9shift_reg_41 <= p_ZZ13fir_optimizedPiiE9shift_reg_40;
                p_ZZ13fir_optimizedPiiE9shift_reg_42 <= p_ZZ13fir_optimizedPiiE9shift_reg_41;
                p_ZZ13fir_optimizedPiiE9shift_reg_44 <= fir_optimized_int_int_shift_reg_5_reg_1303;
                p_ZZ13fir_optimizedPiiE9shift_reg_45 <= p_ZZ13fir_optimizedPiiE9shift_reg_44;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fir_optimized_int_int_shift_reg_3 <= fir_optimized_int_int_shift_reg_2;
                fir_optimized_int_int_shift_reg_7 <= fir_optimized_int_int_shift_reg_6;
                fir_optimized_int_int_shift_reg_8 <= fir_optimized_int_int_shift_reg_7;
                p_ZZ13fir_optimizedPiiE9shift_reg_13 <= p_ZZ13fir_optimizedPiiE9shift_reg_12;
                p_ZZ13fir_optimizedPiiE9shift_reg_33 <= p_ZZ13fir_optimizedPiiE9shift_reg_32;
                p_ZZ13fir_optimizedPiiE9shift_reg_38 <= p_ZZ13fir_optimizedPiiE9shift_reg_37;
                p_ZZ13fir_optimizedPiiE9shift_reg_39 <= p_ZZ13fir_optimizedPiiE9shift_reg_38;
                p_ZZ13fir_optimizedPiiE9shift_reg_43 <= p_ZZ13fir_optimizedPiiE9shift_reg_42;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln48_reg_1437 <= grp_fu_175_p2;
                p_ZZ13fir_optimizedPiiE9shift_reg_14 <= fir_optimized_int_int_shift_reg_20_reg_1321;
                p_ZZ13fir_optimizedPiiE9shift_reg_15 <= p_ZZ13fir_optimizedPiiE9shift_reg_14;
                p_ZZ13fir_optimizedPiiE9shift_reg_16 <= p_ZZ13fir_optimizedPiiE9shift_reg_15;
                p_ZZ13fir_optimizedPiiE9shift_reg_17 <= p_ZZ13fir_optimizedPiiE9shift_reg_16;
                p_ZZ13fir_optimizedPiiE9shift_reg_18 <= p_ZZ13fir_optimizedPiiE9shift_reg_17;
                p_ZZ13fir_optimizedPiiE9shift_reg_19 <= p_ZZ13fir_optimizedPiiE9shift_reg_18;
                p_ZZ13fir_optimizedPiiE9shift_reg_20 <= p_ZZ13fir_optimizedPiiE9shift_reg_19;
                p_ZZ13fir_optimizedPiiE9shift_reg_21 <= p_ZZ13fir_optimizedPiiE9shift_reg_20;
                p_ZZ13fir_optimizedPiiE9shift_reg_22 <= p_ZZ13fir_optimizedPiiE9shift_reg_21;
                p_ZZ13fir_optimizedPiiE9shift_reg_23 <= p_ZZ13fir_optimizedPiiE9shift_reg_22;
                p_ZZ13fir_optimizedPiiE9shift_reg_24 <= p_ZZ13fir_optimizedPiiE9shift_reg_23;
                p_ZZ13fir_optimizedPiiE9shift_reg_25 <= p_ZZ13fir_optimizedPiiE9shift_reg_24;
                p_ZZ13fir_optimizedPiiE9shift_reg_26 <= p_ZZ13fir_optimizedPiiE9shift_reg_25;
                p_ZZ13fir_optimizedPiiE9shift_reg_27 <= p_ZZ13fir_optimizedPiiE9shift_reg_26;
                p_ZZ13fir_optimizedPiiE9shift_reg_28 <= p_ZZ13fir_optimizedPiiE9shift_reg_27;
                p_ZZ13fir_optimizedPiiE9shift_reg_29 <= p_ZZ13fir_optimizedPiiE9shift_reg_28;
                p_ZZ13fir_optimizedPiiE9shift_reg_30 <= p_ZZ13fir_optimizedPiiE9shift_reg_29;
                p_ZZ13fir_optimizedPiiE9shift_reg_31 <= p_ZZ13fir_optimizedPiiE9shift_reg_30;
                p_ZZ13fir_optimizedPiiE9shift_reg_32 <= p_ZZ13fir_optimizedPiiE9shift_reg_31;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_196 <= grp_fu_180_p2;
                reg_200 <= grp_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_204 <= grp_fu_175_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln48_10_fu_330_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg_2) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_42));
    add_ln48_11_fu_539_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg_1) + unsigned(fir_optimized_int_int_shift_reg_5_reg_1303));
    add_ln48_12_fu_544_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_45) + unsigned(input_r));
    add_ln48_13_fu_550_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_44));
    add_ln48_14_fu_907_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_21) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_23));
    add_ln48_15_fu_913_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_20) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_24));
    add_ln48_16_fu_919_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_19) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_25));
    add_ln48_17_fu_925_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_18) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_26));
    add_ln48_18_fu_931_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_17) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_27));
    add_ln48_19_fu_937_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_16) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_28));
    add_ln48_1_fu_501_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_11) + unsigned(fir_optimized_int_int_shift_reg_10_reg_1315));
    add_ln48_20_fu_943_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_15) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_29));
    add_ln48_21_fu_949_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_14) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_30));
    add_ln48_22_fu_955_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg_20_reg_1321) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_31));
    add_ln48_23_fu_1205_p2 <= std_logic_vector(unsigned(add_ln48_54_reg_1496) + unsigned(add_ln48_52_reg_1511));
    add_ln48_24_fu_1142_p2 <= std_logic_vector(unsigned(sub_ln48_16_reg_1501) + unsigned(sub_ln48_17_fu_1136_p2));
    add_ln48_25_fu_1147_p2 <= std_logic_vector(unsigned(add_ln48_24_fu_1142_p2) + unsigned(sub_ln48_14_fu_1120_p2));
    add_ln48_26_fu_1209_p2 <= std_logic_vector(unsigned(add_ln48_25_reg_1516) + unsigned(add_ln48_23_fu_1205_p2));
    add_ln48_27_fu_1258_p2 <= std_logic_vector(unsigned(sub_ln48_19_fu_1252_p2) + unsigned(reg_196));
    add_ln48_28_fu_1283_p2 <= std_logic_vector(unsigned(add_ln48_27_reg_1556) + unsigned(reg_204));
    add_ln48_29_fu_1264_p2 <= std_logic_vector(unsigned(sub_ln48_21_reg_1536) + unsigned(mul_ln48_reg_1437));
    add_ln48_2_fu_506_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_10) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_34));
    add_ln48_30_fu_1268_p2 <= std_logic_vector(unsigned(add_ln48_29_fu_1264_p2) + unsigned(reg_200));
    add_ln48_31_fu_1288_p2 <= std_logic_vector(unsigned(add_ln48_30_reg_1561) + unsigned(add_ln48_28_fu_1283_p2));
    add_ln48_32_fu_1293_p2 <= std_logic_vector(unsigned(add_ln48_31_reg_1571) + unsigned(add_ln48_26_reg_1541));
    add_ln48_33_fu_1153_p2 <= std_logic_vector(unsigned(add_ln48_45_fu_1056_p2) + unsigned(sub_ln48_5_reg_1442));
    add_ln48_34_fu_1214_p2 <= std_logic_vector(unsigned(add_ln48_33_reg_1521) + unsigned(add_ln48_44_fu_1179_p2));
    add_ln48_35_fu_1158_p2 <= std_logic_vector(unsigned(reg_196) + unsigned(reg_200));
    add_ln48_36_fu_1164_p2 <= std_logic_vector(unsigned(add_ln48_35_fu_1158_p2) + unsigned(sub_ln48_6_fu_1072_p2));
    add_ln48_37_fu_1274_p2 <= std_logic_vector(unsigned(add_ln48_36_reg_1526) + unsigned(add_ln48_34_reg_1546));
    add_ln48_38_fu_1219_p2 <= std_logic_vector(unsigned(reg_196) + unsigned(reg_200));
    add_ln48_39_fu_1225_p2 <= std_logic_vector(unsigned(add_ln48_38_fu_1219_p2) + unsigned(reg_204));
    add_ln48_3_fu_512_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg_9) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_35));
    add_ln48_40_fu_1170_p2 <= std_logic_vector(unsigned(add_ln48_50_reg_1432) + unsigned(add_ln48_53_reg_1452));
    add_ln48_41_fu_1174_p2 <= std_logic_vector(unsigned(add_ln48_40_fu_1170_p2) + unsigned(sub_ln48_8_reg_1447));
    add_ln48_42_fu_1231_p2 <= std_logic_vector(unsigned(add_ln48_41_reg_1531) + unsigned(add_ln48_39_fu_1225_p2));
    add_ln48_43_fu_1278_p2 <= std_logic_vector(unsigned(add_ln48_42_reg_1551) + unsigned(add_ln48_37_fu_1274_p2));
    add_ln48_44_fu_1179_p2 <= std_logic_vector(unsigned(sub_ln48_2_reg_1506) + unsigned(add_ln48_1_reg_1364));
    add_ln48_45_fu_1056_p2 <= std_logic_vector(unsigned(shl_ln48_4_fu_1046_p2) + unsigned(shl_ln48_5_fu_1051_p2));
    add_ln48_46_fu_844_p2 <= std_logic_vector(unsigned(sub_ln48_4_reg_1422) + unsigned(shl_ln48_9_fu_839_p2));
    add_ln48_47_fu_607_p2 <= std_logic_vector(unsigned(sub_ln48_7_fu_596_p2) + unsigned(shl_ln48_15_fu_602_p2));
    add_ln48_48_fu_618_p2 <= std_logic_vector(unsigned(add_ln48_47_fu_607_p2) + unsigned(shl_ln48_16_fu_613_p2));
    add_ln48_49_fu_865_p2 <= std_logic_vector(unsigned(add_ln48_48_reg_1427) + unsigned(shl_ln48_17_fu_860_p2));
    add_ln48_4_fu_518_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg_8_load_reg_1327) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_36));
    add_ln48_50_fu_648_p2 <= std_logic_vector(unsigned(sub_ln48_9_fu_636_p2) + unsigned(shl_ln48_20_fu_642_p2));
    add_ln48_51_fu_1099_p2 <= std_logic_vector(unsigned(sub_ln48_10_fu_1088_p2) + unsigned(shl_ln48_23_fu_1094_p2));
    add_ln48_52_fu_1105_p2 <= std_logic_vector(unsigned(add_ln48_51_fu_1099_p2) + unsigned(add_ln48_12_reg_1406));
    add_ln48_53_fu_902_p2 <= std_logic_vector(unsigned(sub_ln48_12_fu_896_p2) + unsigned(add_ln48_13_reg_1414));
    add_ln48_54_fu_978_p2 <= std_logic_vector(unsigned(sub_ln48_13_fu_972_p2) + unsigned(add_ln48_14_fu_907_p2));
    add_ln48_5_fu_318_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg_7) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_37));
    add_ln48_6_fu_324_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg_6) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_38));
    add_ln48_7_fu_523_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg_5) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_39_load_reg_1309));
    add_ln48_8_fu_528_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg_4) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_40));
    add_ln48_9_fu_534_p2 <= std_logic_vector(unsigned(fir_optimized_int_int_shift_reg_3_load_reg_1333) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_41));
    add_ln48_fu_312_p2 <= std_logic_vector(unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_12) + unsigned(p_ZZ13fir_optimizedPiiE9shift_reg_32));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_175_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, add_ln48_reg_1339, add_ln48_7_reg_1391, add_ln48_18_reg_1469, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_175_p0 <= add_ln48_18_reg_1469;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_175_p0 <= add_ln48_7_reg_1391;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_175_p0 <= add_ln48_reg_1339;
        else 
            grp_fu_175_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_175_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_175_p1 <= ap_const_lv32_FFFFFFAC(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_175_p1 <= ap_const_lv32_FFFFFA50(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_175_p1 <= ap_const_lv32_FFFFFF0A(12 - 1 downto 0);
        else 
            grp_fu_175_p1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_180_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, add_ln48_5_reg_1344, add_ln48_8_reg_1396, add_ln48_20_reg_1480, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_180_p0 <= add_ln48_20_reg_1480;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_180_p0 <= add_ln48_8_reg_1396;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_180_p0 <= add_ln48_5_reg_1344;
        else 
            grp_fu_180_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_180_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_180_p1 <= ap_const_lv32_FFFFFE3B(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_180_p1 <= ap_const_lv32_FFFFFAC3(12 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_180_p1 <= ap_const_lv32_FFFFFF8E(12 - 1 downto 0);
        else 
            grp_fu_180_p1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_185_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, add_ln48_6_reg_1349, add_ln48_9_reg_1401, add_ln48_21_reg_1485, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_185_p0 <= add_ln48_21_reg_1485;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_185_p0 <= add_ln48_9_reg_1401;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_185_p0 <= add_ln48_6_reg_1349;
        else 
            grp_fu_185_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_185_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_185_p1 <= ap_const_lv32_FFFFFDC7(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_185_p1 <= ap_const_lv32_FFFFFED9(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_185_p1 <= ap_const_lv32_FFFFFC78(11 - 1 downto 0);
        else 
            grp_fu_185_p1 <= "XXXXXXXXXXX";
        end if; 
    end process;

    output_r <= std_logic_vector(unsigned(add_ln48_43_reg_1566) + unsigned(add_ln48_32_fu_1293_p2));

    output_r_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_r_ap_vld <= ap_const_logic_1;
        else 
            output_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln48_10_fu_849_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_3_reg_1379),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln48_11_fu_1062_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_4_reg_1385),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    shl_ln48_12_fu_1067_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_4_reg_1385),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln48_13_fu_586_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_10_reg_1354),to_integer(unsigned('0' & ap_const_lv32_B(31-1 downto 0)))));
    shl_ln48_14_fu_591_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_10_reg_1354),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    shl_ln48_15_fu_602_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_10_reg_1354),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln48_16_fu_613_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_10_reg_1354),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln48_17_fu_860_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_10_reg_1354),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln48_18_fu_624_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_11_fu_539_p2),to_integer(unsigned('0' & ap_const_lv32_C(31-1 downto 0)))));
    shl_ln48_19_fu_630_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_11_fu_539_p2),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
    shl_ln48_1_fu_1013_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_1_reg_1364),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln48_20_fu_642_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_11_fu_539_p2),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln48_21_fu_1078_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_12_reg_1406),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    shl_ln48_22_fu_1083_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_12_reg_1406),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln48_23_fu_1094_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_12_reg_1406),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln48_24_fu_875_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_13_reg_1414),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    shl_ln48_25_fu_880_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_13_reg_1414),to_integer(unsigned('0' & ap_const_lv32_B(31-1 downto 0)))));
    shl_ln48_26_fu_891_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_13_reg_1414),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln48_27_fu_960_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_14_fu_907_p2),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    shl_ln48_28_fu_966_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_14_fu_907_p2),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln48_29_fu_1110_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_15_reg_1457),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln48_2_fu_1024_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_1_reg_1364),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln48_30_fu_1115_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_15_reg_1457),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln48_31_fu_984_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_16_fu_919_p2),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln48_32_fu_990_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_16_fu_919_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln48_33_fu_1126_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_17_reg_1463),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    shl_ln48_34_fu_1131_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_17_reg_1463),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln48_35_fu_1236_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_19_reg_1474),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln48_36_fu_1247_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_19_reg_1474),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln48_37_fu_1183_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_22_reg_1490),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    shl_ln48_38_fu_1194_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_22_reg_1490),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln48_3_fu_1035_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_1_reg_1364),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln48_4_fu_1046_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_2_reg_1373),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    shl_ln48_5_fu_1051_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_2_reg_1373),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln48_6_fu_556_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_3_fu_512_p2),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    shl_ln48_7_fu_562_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_3_fu_512_p2),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln48_8_fu_574_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_3_fu_512_p2),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    shl_ln48_9_fu_839_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_3_reg_1379),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln48_fu_1008_p2 <= std_logic_vector(shift_left(unsigned(add_ln48_1_reg_1364),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    sub_ln48_10_fu_1088_p2 <= std_logic_vector(unsigned(shl_ln48_21_fu_1078_p2) - unsigned(shl_ln48_22_fu_1083_p2));
    sub_ln48_11_fu_885_p2 <= std_logic_vector(unsigned(shl_ln48_24_fu_875_p2) - unsigned(shl_ln48_25_fu_880_p2));
    sub_ln48_12_fu_896_p2 <= std_logic_vector(unsigned(sub_ln48_11_fu_885_p2) - unsigned(shl_ln48_26_fu_891_p2));
    sub_ln48_13_fu_972_p2 <= std_logic_vector(unsigned(shl_ln48_27_fu_960_p2) - unsigned(shl_ln48_28_fu_966_p2));
    sub_ln48_14_fu_1120_p2 <= std_logic_vector(unsigned(shl_ln48_29_fu_1110_p2) - unsigned(shl_ln48_30_fu_1115_p2));
    sub_ln48_15_fu_996_p2 <= std_logic_vector(unsigned(shl_ln48_31_fu_984_p2) - unsigned(shl_ln48_32_fu_990_p2));
    sub_ln48_16_fu_1002_p2 <= std_logic_vector(unsigned(sub_ln48_15_fu_996_p2) - unsigned(add_ln48_16_fu_919_p2));
    sub_ln48_17_fu_1136_p2 <= std_logic_vector(unsigned(shl_ln48_33_fu_1126_p2) - unsigned(shl_ln48_34_fu_1131_p2));
    sub_ln48_18_fu_1241_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(shl_ln48_35_fu_1236_p2));
    sub_ln48_19_fu_1252_p2 <= std_logic_vector(unsigned(sub_ln48_18_fu_1241_p2) - unsigned(shl_ln48_36_fu_1247_p2));
    sub_ln48_1_fu_1029_p2 <= std_logic_vector(unsigned(sub_ln48_fu_1018_p2) - unsigned(shl_ln48_2_fu_1024_p2));
    sub_ln48_20_fu_1188_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(shl_ln48_37_fu_1183_p2));
    sub_ln48_21_fu_1199_p2 <= std_logic_vector(unsigned(sub_ln48_20_fu_1188_p2) - unsigned(shl_ln48_38_fu_1194_p2));
    sub_ln48_2_fu_1040_p2 <= std_logic_vector(unsigned(sub_ln48_1_fu_1029_p2) - unsigned(shl_ln48_3_fu_1035_p2));
    sub_ln48_3_fu_568_p2 <= std_logic_vector(unsigned(shl_ln48_6_fu_556_p2) - unsigned(shl_ln48_7_fu_562_p2));
    sub_ln48_4_fu_580_p2 <= std_logic_vector(unsigned(sub_ln48_3_fu_568_p2) - unsigned(shl_ln48_8_fu_574_p2));
    sub_ln48_5_fu_854_p2 <= std_logic_vector(unsigned(add_ln48_46_fu_844_p2) - unsigned(shl_ln48_10_fu_849_p2));
    sub_ln48_6_fu_1072_p2 <= std_logic_vector(unsigned(shl_ln48_11_fu_1062_p2) - unsigned(shl_ln48_12_fu_1067_p2));
    sub_ln48_7_fu_596_p2 <= std_logic_vector(unsigned(shl_ln48_13_fu_586_p2) - unsigned(shl_ln48_14_fu_591_p2));
    sub_ln48_8_fu_870_p2 <= std_logic_vector(unsigned(add_ln48_49_fu_865_p2) - unsigned(add_ln48_10_reg_1354));
    sub_ln48_9_fu_636_p2 <= std_logic_vector(unsigned(shl_ln48_18_fu_624_p2) - unsigned(shl_ln48_19_fu_630_p2));
    sub_ln48_fu_1018_p2 <= std_logic_vector(unsigned(shl_ln48_fu_1008_p2) - unsigned(shl_ln48_1_fu_1013_p2));
end behav;
